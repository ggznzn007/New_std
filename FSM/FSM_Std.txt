FSM
- 주어진는 모든 시간에서 처해 있을 수 있는 유한 개의 상태를 가지고
  주어지는 입력에 따라 어떤 상태에서 다른 상태로 전환시키거나 
  출력이나 액션이 일어나는 장치 또는 그런 장치를 나타낸 모델
- 유한상태기계 바탕에 깔린 아이디어는 객체의 행동을 쉽게 처리할 수 있는
  덩어리 또는 상태들로 분해하는 것
- 플레이어, 적, NPC와 같은 캐릭터의 행동을 "대기","걷기","뛰기","공격"
  등과 같이 쉽게 처리할 수 있는 상태 단위로 관리하는 것

장점
- 쉬운구현
  행동단위로 분할된 구조를 가지기 때문에 구조를 알아보기 쉽고 구현이 쉽다.
- 오류수정 용이
  게임 캐릭터의 행동을 쉽게 관리할 수 있는 클래스 단위로 분할하기 때문에 
  캐릭터 동작이 이상하면 해당 동작의 클래스에서 오류를 발견할 수 있기 때문에
  오류수정이 쉽다
- 유연한 코드
  개발자는 게임 캐릭터의 FSM을 조정하고 미세조정을 통해 디자이너가 요구하는
  행동을 쉽게 구현해 줄수 있다. 또한 새로운 상태들과 규칙들을 추가함으로써
  캐릭터 행동의 범위를 간단하게 확장할 수 있다.
- 직관적인 코드
  게임 캐릭터의 행동을 여러 개의 상태들로 분해하고, 이 상태를 전환하는데
  요구되는 규칙들을 나열하기 때문에 해당 캐릭터가 가지고 있는 상태와 상태의 변화를
  직관적으로 볼 수 있다. 상태 테이블, 다이어그램 등을 통해 일반사람들에게 캐릭터의
  상태를 쉽게 설명할 수 있고 상태에 대해 논의할 수 있다.

실생활의 예
- 전구를 켜고 끄는 스위치, 음료자판기

게임이나 프로그램에서의 예
- 플레이어, 적, NPC 등의 개인 단위의 행동 관리
- 스포츠,RTS 등의 장르와 같이 여러캐릭터를 한꺼번에 다룰 때 그룹행동 관리
- 유니티의 씬 단위 관리
(Intro, Stage01, Stage02, GameClear, GameOver 상태 등
=>1. 해당씬을 시작할 때 1회 모든 오브젝트와 컴포넌트 메모리할당
=>2. 해당씬을 업데이트할 때 매 프레임 씬구동, 오브젝트의 행동들을 관리
=>3. 해당씬을 끝낼 때 1회 모든 오브젝트와 컴포넌트 메모리해제
- 유니티의 메카님 애니메이션 시스템
