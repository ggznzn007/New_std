한개의 고유 상태를 다른 객체들에서 공유하게 만들어 메모리 사용량을 줄인다.
내용이 같은 객체가 이미 있으면 새로 객체를 또 만들지 않고
그 내용 같은 기존 객체를 공유한다.
게임 내에서 같은 메시와 텍스처를 여러번 메모리에 올릴 필요가 없기 때문에
TreeModel 객체는 하나만 존재하며 각 나무 인스턴스들은
이 TreeModel 객체 하나를 공유하며 참조할 뿐이다.
Tree 클래스에서는 인스턴스별로 다른 상태값만 남겨둔다.
플라이웨이트 패턴에서의 객체 데이터 종류
모든 객체의 데이터 값이 같은 부분들만 모아둔 데이터. 즉 공유할 수 있는 데이터.
나머지 데이터는 인스턴스별로 값이 다른 외부 상태에 해당.
생성된 객체를 공유하는 것이라서 C++ 포인터 개념과도 같다.

구현
인스턴스를 요청 받았을 때 이전에 같은걸 만들어 놓은게 있는지 확인해보고 있다면
그걸 리턴해야 공유 기능이 유지된다.
이러려면 이런 코드를 인터페이스 밑으로 숨겨두어야 한다.
팩토리 메서드 패턴
이미 생성해놓은 객체를 찾을 수 이도록 Pool을 관리해야 한다

예시1은 음료 중 콜라  == 코드 적용 
예시2는 탄산음료 중 사이다 == 유니티에 적용